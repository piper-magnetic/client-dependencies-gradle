import groovy.io.FileType

plugins {
    id "com.gradle.plugin-publish" version "0.18.0"

    id "groovy"
    id "maven-publish"
    id "signing"
    id "codenarc"
    id "idea"
    id "project-report"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'clean', 'build'

version = '2.0.0'
group = 'com.magnetichq'

ext {
    artifactId = 'client-dependencies-g7'
    githubUrl = 'https://github.com/piper-magnetic/client-dependencies-gradle'
}

repositories {
    jcenter()
}

dependencies {
    implementation localGroovy()
    implementation gradleApi()
    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    implementation 'org.codehaus.gpars:gpars:1.2.1'
    implementation 'org.ajoberstar:grgit:1.5.0'
    testImplementation('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude module: 'junit-dep'
        exclude module: 'groovy-all'
    }
    testImplementation 'com.github.tomakehurst:wiremock:1.58:standalone'
    testImplementation 'junit:junit:4.13'
}

codenarc {
    toolVersion = '0.25.1'
    configFile = file("${rootProject.projectDir}/config/codenarc/rules.groovy")
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId project.artifactId
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name project.artifactId
                    description project.description
                    url project.githubUrl
                    scm {
                        url project.githubUrl
                        connection "scm:${project.githubUrl}.git"
                        developerConnection "scm:${project.githubUrl}.git"
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'piper-magnetic'
                            name 'Piper Horscroft'
                            email 'david@magnetichq.com'
                        }
                    }
                }
            }
            from components.java
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

pluginBundle {
    website = project.githubUrl
    vcsUrl = project.githubUrl
    description = 'Install client side dependencies from NPM or Bower by declaring dependencies in build.gradle, updated for Gradle 7.x.'
    tags = ['npm', 'bower', 'client', 'web']

    plugins {
        clientDependencies {
            id = 'com.magnetichq.client-dependencies'
            displayName = 'Client Dependencies Plugin G7'
        }
    }
    mavenCoordinates {
        groupId = 'com.magnetichq'
        artifactId = project.artifactId
    }
}

task fixResourcePaths() {
    doLast {
        List<File> gitFolders = []

        project.file("build/resources/test/").eachFileRecurse(FileType.DIRECTORIES) {
            if (it.name == '_git') {
                gitFolders += it
            }
        }

        gitFolders.each {
            it.renameTo(it.absolutePath.replaceAll('_git', '.git'))
        }

    }
}

signing {
    sign configurations.archives
}

processTestResources.finalizedBy 'fixResourcePaths'

task('release', dependsOn: ['publishPlugins'])
